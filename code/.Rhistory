saveRDS(object = plt.df, file = paste0("TF.enrichment_analysis.rds"))
# define signficant rows as padj <= 0.05
# note that this ensures that signficant pvals are
# significant in both 10k and 100k analyses (which is conservative)
# storing the signficant rows is done for convenience, as it
# will allow me too change the signficance threshold
# in one place!
sig.rows <- plt.df$padj <= 0.05
# define cols
colblind_pal <- colorblind_pal()(8) # colorblind palette - commenting out
pltcols <- rep("black", nrow(plt.df))
pltcols[sig.rows] <- colblind_pal[7]
# plot promoters
p.rows <- plt.df$analysis == "Promoter"
plt.p <- ggplot(plt.df[p.rows,],
aes(x = normalOR, y = tumorOR)) +
geom_point(col =pltcols[p.rows]) +
xlab("UPPP OR") +
ylab("Tumor OR") +
ggtitle("Promoters") +
theme_classic() +
geom_abline(intercept = 0, slope = 1, color="grey",
linetype="dashed", size=1) +
xlim(0, 10) +
ylim(0, 16)
# plot typical enhancers
e.rows <- plt.df$analysis == "Typical Enhancer"
plt.e <- ggplot(plt.df[e.rows,],
aes(x = normalOR, y = tumorOR)) +
geom_point(col = pltcols[e.rows]) +
xlab("UPPP OR") +
ylab("Tumor OR") +
ggtitle("Typical Enhancers") +
theme_classic() +
geom_abline(intercept = 0, slope = 1, color="grey",
linetype="dashed", size=1) +
xlim(0, 10) +
ylim(0, 16)
# plot super enhancers
se.rows <- plt.df$analysis == "Super Enhancer"
plt.se <- ggplot(plt.df[se.rows,],
aes(x = normalOR, y = tumorOR)) +
geom_point(col = pltcols[se.rows]) +
xlab("UPPP OR") +
ylab("Tumor OR") +
ggtitle("Super Enhancers") +
theme_classic() +
geom_abline(intercept = 0, slope = 1, color="grey",
linetype="dashed", size=1) +
xlim(0, 10) +
ylim(0, 16)
# plot the signficant TFs and their delta values (delta represents the log OR tumor - log OR normal)
# This will require some preprocessing
# first find the rows from the df with TFs you want to plot
delta.rows <- (plt.df$analysis == "Super Enhancer" &
sig.rows & plt.df$delta > 0) | (plt.df$analysis == "Typical Enhancer" &
sig.rows & plt.df$delta > 0) |
(plt.df$analysis == "Promoter" &
sig.rows & plt.df$delta > 0)
# now subset the df to these rows only
plt.df.delta <- plt.df[which(delta.rows),]
# store unique vector of these TFs
delta.TFs <- unique(as.character(plt.df.delta$TF))
# now assign cols depending on whether these TFs are signficant in TE, SE, or both.
# also parse out the delta and adjp values for plotting
# uses a for loop
delta.cols <- rep("black", length(delta.TFs)) # init color vector as "black"
names(delta.cols) <- delta.TFs # assign TF as rownames
delta.vals <- rep(0, length(delta.TFs)) # init - will update vals in loop below
names(delta.vals) <- delta.TFs # assign TFs as rownames
delta.padj <- rep(0, length(delta.TFs)) # init - will update vals in loop below
names(delta.padj) <- delta.TFs # assign TFs as rownames
# run for loop to do color asssignments and delta value parsing
for (TF in delta.TFs){
temp.df <- plt.df.delta[plt.df.delta$TF == TF,]
temp.analysis <- as.character(temp.df$analysis)
temp.delta <- temp.df$delta
test1 <- sum(grepl("Promoter", temp.analysis))
test2 <- sum(grepl("Typical Enhancer", temp.analysis))
test3 <- sum(grepl("Super Enhancer", temp.analysis))
if (test1 == 1 & test2 == 1 & test3 == 1){
delta.cols[TF] <- "P_TE_SE"
delta.vals[TF] <- temp.df[temp.df$analysis == "Super Enhancer",]$delta
delta.padj[TF] <- temp.df[temp.df$analysis == "Super Enhancer",]$padj
} else if (test1 == 1 & test2 == 1){
delta.cols[TF] <- "P_TE"
delta.vals[TF] <- temp.df[temp.df$analysis == "Typical Enhancer",]$delta
delta.padj[TF] <- temp.df[temp.df$analysis == "Typical Enhancer",]$padj
} else if (test1 == 1 & test3 == 1){
delta.cols[TF] <- "P_SE"
delta.vals[TF] <- temp.df[temp.df$analysis == "Super Enhancer",]$delta
delta.padj[TF] <- temp.df[temp.df$analysis == "Super Enhancer",]$padj
} else if (test2 == 1 & test3 == 1){
delta.cols[TF] <- "TE_SE"
delta.vals[TF] <- temp.df[temp.df$analysis == "Super Enhancer",]$delta
delta.padj[TF] <- temp.df[temp.df$analysis == "Super Enhancer",]$padj
} else if (test1 == 1){
delta.cols[TF] <- "P"
delta.vals[TF] <- temp.df[temp.df$analysis == "Promoter",]$delta
delta.padj[TF] <- temp.df[temp.df$analysis == "Promoter",]$padj
} else if (test2 == 1){
delta.cols[TF] <- "TE"
delta.vals[TF] <- temp.df[temp.df$analysis == "Typical Enhancer",]$delta
delta.padj[TF] <- temp.df[temp.df$analysis == "Typical Enhancer",]$padj
} else if (test3 == 1){
delta.cols[TF] <- "SE"
delta.vals[TF] <- temp.df[temp.df$analysis == "Super Enhancer",]$delta
delta.padj[TF] <- temp.df[temp.df$analysis == "Super Enhancer",]$padj
} else{
stop("This should not be possible - color loop, delta plot")
}
}
col_map <- c(P_TE_SE = "purple",
P_TE = "gold",
P_SE = "lightpink",
TE_SE = "hotpink",
P = "blue",
TE = "lightgreen",
SE = "cyan"
)
# replace plt.df.delta with df derived from vectors you just made
plt.df.delta <- data.frame(delta = delta.vals,
cmap = delta.cols,
padj = delta.padj)
plt.df.delta$TF <- rownames(plt.df.delta)
# order TFs be delta value
plt.df.delta$TF <- factor(plt.df.delta$TF,
levels = plt.df.delta$TF[order(plt.df.delta$delta, decreasing = T)])
# save this df in a new variable
plt.TFs1 <- cbind(plt.df.delta)
# repeat the processing above, but now for TFs significantly
# enriched in normal-specific features
# first find the rows from the df with TFs you want to plot
delta.rows <- (plt.df$analysis == "Super Enhancer" &
sig.rows & plt.df$delta < 0) |
(plt.df$analysis == "Typical Enhancer" &
sig.rows & plt.df$delta < 0) |
(plt.df$analysis == "Promoter" &
sig.rows & plt.df$delta < 0)
# now subset the df to these rows only
plt.df.delta <- plt.df[which(delta.rows),]
# store unique vector of these TFs
delta.TFs <- unique(as.character(plt.df.delta$TF))
# now assign cols depending on whether these TFs are signficant in TE, SE, or both.
# also parse out the delta and adjp values for plotting
# uses a for loop
delta.cols <- rep("black", length(delta.TFs)) # init color vector as "black"
names(delta.cols) <- delta.TFs # assign TF as rownames
delta.vals <- rep(0, length(delta.TFs)) # init - will update vals in loop below
names(delta.vals) <- delta.TFs # assign TFs as rownames
delta.padj <- rep(0, length(delta.TFs)) # init - will update vals in loop below
names(delta.padj) <- delta.TFs # assign TFs as rownames
# run for loop to do color asssignments and delta value parsing
for (TF in delta.TFs){
temp.df <- plt.df.delta[plt.df.delta$TF == TF,]
temp.analysis <- as.character(temp.df$analysis)
temp.delta <- temp.df$delta
test1 <- sum(grepl("Promoter", temp.analysis))
test2 <- sum(grepl("Typical Enhancer", temp.analysis))
test3 <- sum(grepl("Super Enhancer", temp.analysis))
if (test1 == 1 & test2 == 1 & test3 == 1){
delta.cols[TF] <- "P_TE_SE"
delta.vals[TF] <- temp.df[temp.df$analysis == "Super Enhancer",]$delta
delta.padj[TF] <- temp.df[temp.df$analysis == "Super Enhancer",]$padj
} else if (test1 == 1 & test2 == 1){
delta.cols[TF] <- "P_TE"
delta.vals[TF] <- temp.df[temp.df$analysis == "Typical Enhancer",]$delta
delta.padj[TF] <- temp.df[temp.df$analysis == "Typical Enhancer",]$padj
} else if (test1 == 1 & test3 == 1){
delta.cols[TF] <- "P_SE"
delta.vals[TF] <- temp.df[temp.df$analysis == "Super Enhancer",]$delta
delta.padj[TF] <- temp.df[temp.df$analysis == "Super Enhancer",]$padj
} else if (test2 == 1 & test3 == 1){
delta.cols[TF] <- "TE_SE"
delta.vals[TF] <- temp.df[temp.df$analysis == "Super Enhancer",]$delta
delta.padj[TF] <- temp.df[temp.df$analysis == "Super Enhancer",]$padj
} else if (test1 == 1){
delta.cols[TF] <- "P"
delta.vals[TF] <- temp.df[temp.df$analysis == "Promoter",]$delta
delta.padj[TF] <- temp.df[temp.df$analysis == "Promoter",]$padj
} else if (test2 == 1){
delta.cols[TF] <- "TE"
delta.vals[TF] <- temp.df[temp.df$analysis == "Typical Enhancer",]$delta
delta.padj[TF] <- temp.df[temp.df$analysis == "Typical Enhancer",]$padj
} else if (test3 == 1){
delta.cols[TF] <- "SE"
delta.vals[TF] <- temp.df[temp.df$analysis == "Super Enhancer",]$delta
delta.padj[TF] <- temp.df[temp.df$analysis == "Super Enhancer",]$padj
} else{
stop("This should not be possible - color loop, delta plot")
}
}
# replace plt.df.delta with df dervied from vectors you just made
plt.df.delta <- data.frame(delta = delta.vals,
cmap = delta.cols,
padj = delta.padj)
plt.df.delta$TF <- rownames(plt.df.delta)
# order TFs be delta value
plt.df.delta$TF <- factor(plt.df.delta$TF,
levels = plt.df.delta$TF[order(plt.df.delta$delta, decreasing = T)])
# combine these TFs with previously determined tumor specific
# TFs
plt.df.delta <- rbind(plt.TFs1, plt.df.delta)
# sort df
plt.df.delta <- plt.df.delta[order(plt.df.delta$delta, decreasing = T),]
# now plot the figure
# Note, this represents plt.d (delta) and plt.d (panel d in the combined figure)
plt.d <- ggplot(plt.df.delta, # plt.dn == delta normal
aes(x = TF,
y = delta,
color = cmap)) +
#geom_point(col = delta.cols, size = -log10(plt.df.delta$padj)) + # note: commenting this out because I don't like how this looks with size scaled to pval - I don't think it adds much either as this is already filtered for signficantly enriched TFs
geom_point(size = 3) +
geom_segment(aes(xend = TF), col = "black", yend = 0) +
labs(x = "TF",
y = expression(paste(Delta, "log(OR)")),
color = "Legend") +
ggtitle("Significantly Enriched TFs") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90, hjust = 0)) +
scale_color_manual(values = col_map[levels(plt.df.delta$cmap)]) +
# scale_color_colorblind() + # looks terrible
# scale_color_viridis(discrete = TRUE, option = "C") + # all options look terrible
theme(legend.position="bottom") +
ylim(-3,3) +
geom_hline(yintercept = 0, linetype="solid",
color = "black", size=2)
# combined plots using ggpubr
# using two calls to ggarrange, one inside the other
# this should allow for the alignment I want
pdf("../figures/TFs_enrichments.pdf", width = 9, height = 6,
onefile = F)
ggarrange(ggarrange(plt.p, plt.e, plt.se,
ncol = 3,
labels = c("A", "B", "C")),
# ggarrange(plt.dt,
#           plt.dn,
#           ncol = 2,
#           labels = c("D", "E")),
plt.d,
nrow = 2,
common.legend = T,
legend = "bottom",
labels = c("", "D")
)
dev.off()
#############################################################
# plot 10k vs 100k values for supplemental qc figure
# compare 10k vs 100k
plt.10kvs100k <- ggplot(plt.df,
aes(x = delta10k,
y = delta100k,
color = analysis)
) +
geom_point(shape = 16) +
theme_classic(base_size = 20) +
geom_abline(intercept = 0, slope = 1, linetype = 2, col = "darkgrey") +
scale_color_manual(values=alpha(c("cyan","hotpink", "lightgreen"), 1)) +
labs(color = "Legend") +
theme(legend.position = "bottom") +
xlab(expression(paste(Delta, "10k"))) +
ylab(expression(paste(Delta, "100k")))
#############################################################
# Evaluate normality assumption
#############################################################
# evaluate to see distributions of delta10k given normality
# assumption inherent to method I used above
# plot hists and qqs for delta10k and delta100k
# Note: save these in case they are useful as supplemental figures
# graph as density histogram
plt.hist.10k <-ggplot(plt.df,
aes(x = delta10k)) +
geom_density() +
theme_classic() +
xlab(expression(paste(Delta, "10k")))
# graph qq with line
plt.qq.10k <- ggplot(plt.df,
aes(sample = delta10k)) +
geom_qq() +
geom_qq_line() +
theme_classic() +
ylab(expression(paste(Delta, "10k")))
# graph as density histogram
plt.hist.100k <-ggplot(plt.df,
aes(x = delta100k)) +
geom_density() +
theme_classic() +
xlab(expression(paste(Delta, "100k")))
# graph qq with line
plt.qq.100k <- ggplot(plt.df,
aes(sample = delta100k)) +
geom_qq() +
geom_qq_line() +
theme_classic() +
ylab(expression(paste(Delta, "100k")))
# output figures as a combined figure with 5 panels
pdf("../figures/TFs_enrichments.qc.pdf", onefile = F)
ggarrange(
ggarrange(
plt.hist.10k,
plt.hist.100k,
plt.qq.10k,
plt.qq.100k,
ncol = 2,
nrow = 2,
labels = c("A", "B", "C", "D"),
common.legend = T
),
plt.10kvs100k,
ncol = 1,
nrow = 2,
labels = c("", "E"),
common.legend = T,
legend = "bottom"
)
dev.off()
library(rtracklayer)
library(dplyr)
library(plyranges)
library(GenomicRanges)
library(differential.coverage)
library(stringr)
#load dSEDs
SEDs<-readRDS('../rds/SE_by_ChipSeq.rds')
#load dSEDs
SEDs<-readRDS('../data/SE_by_ChipSeq.rds')
# calculate the midpoint of each SE
# this will be used to measure distance to nearest gene
SEDmids <- makeGRangesFromDataFrame(SEDs,
keep.extra.columns=TRUE,
ignore.strand=FALSE,
seqinfo=NULL,
seqnames.field=c("seqnames",
"seqname",
"chromosome",
"chrom",
"chr",
"chromosome_name",
"seqid"),
start.field="start",
end.field=c("end", "stop"),
strand.field="strand",
starts.in.df.are.0based=FALSE)# copy object as genomic ranges
# Note: in data, common_SE is how Sasha calls SED (super enhancer domain)
start(SEDmids) <- (start(SEDmids) + end(SEDmids)) / 2 # reassign start to midpoint
width(SEDmids) <- 1 # set width to 0, which should make end == start
# set all strands to *, as SEDs seem to be on both strands
strand(SEDmids) <- "*"
# Use Sasha's differential.coverage pacakge to get hg19 gene annotations
gene.anno <- differential.coverage::get.Known.Gene.List(genome.annotation.id = 'gencode19')
devtools::install_github('favorov/differential.coverage')
# Use Sasha's differential.coverage pacakge to get hg19 gene annotations
gene.anno <- differential.coverage::get.Known.Gene.List(genome.annotation.id = 'gencode19')
# Use Sasha's differential.coverage pacakge to get hg19 gene annotations
gene.anno <- differential.coverage::get.Known.Gene.List(genome.annotation.id = 'gencode19')
# Use Sasha's differential.coverage pacakge to get hg19 gene annotations
#gene.anno <- differential.coverage::get.Known.Gene.List(genome.annotation.id = 'gencode19')
gene.anno <- differential.coverage::gencode_hs19_genes
# Note: genes exist in chrX, chrY, chrM. We will remove chrY and chrM
# remove duplicate genes
gene_freq <- table(gene.anno$ensembl)
gene.dups <- names(which(gene_freq > 1))
# remove duplicates and chrY/chrM
gene.anno.u <- gene.anno %>%
filter((!ensembl %in% gene.dups) &
seqnames != "chrY" &
seqnames != "chrM")
# set the ranges of each gene to only be the start site (presumably transcription start site)
# note: account for strand - if strand == "-", set start to end
start(gene.anno.u) <- ifelse(as.character(strand(gene.anno.u)) == '-',
end(gene.anno.u),
start(gene.anno.u))
width(gene.anno.u) <- 1
# use distanceToNearest function to calculate the closest SED for each gene
gene_SED_hits <- distanceToNearest(gene.anno.u, SEDmids, ignore.strand=TRUE)
# error check that all entries had a nearest SED hit
stopifnot(length(queryHits(gene_SED_hits)) == length(gene.anno.u))
# subset out hits
genehits <- gene.anno.u[queryHits(gene_SED_hits)]
SEDhits <- SEDmids[subjectHits(gene_SED_hits)]
dists <- mcols(gene_SED_hits)$distance # conveniently access below
# adjust dist direction (sign) depending on whether gene TSS is upstream or
# downstream of SED location
gene_strand_minus <- as.character(strand(genehits))=='-'
SED_bigger <- start(genehits) < start(SEDhits)
# update dists - dists including direction from SED to gene TSS
# if minus and SED bigger, than its upstream, and +dist to gene
# if plus and SED smaller (FALSE == FALSE in comparison below), than its upstream, and +dist to gene
## otherwise, its the reverse
dists <- ifelse(gene_strand_minus == SED_bigger, dists, -dists)
# make df with results
SED.df <- data.frame(
distance = dists,
SE_ID = SEDhits$ID,
SE_logFC = SEDhits$logFC,
SE_logCPM = SEDhits$logCPM,
SE_F = SEDhits$F,
SE_PValue = SEDhits$PValue,
SE_FDR = SEDhits$FDR,
stringsAsFactors=FALSE)
# add genes as rownames
rownames(SED.df) <- genehits$ensembl
# get differential expression results for 77 samples from RNA-seq
DEG <- readRDS('../RNAseq-gencode19/T_to_N_DE_results_hg19_ensembl_77_samples.rds')
# get differential expression results for 77 samples from RNA-seq
DEG <- readRDS('../data/T_to_N_DE_results_hg19_ensembl_77_samples.rds')
# get differential expression results for 77 samples from RNA-seq
DEG <- readRDS('../data/T_to_N_DE_results_hg19_ensembl_77_samples.rds')
BiocManager::install("DESeq2")
# get differential expression results for 77 samples from RNA-seq
DEG <- readRDS('../data/T_to_N_DE_results_hg19_ensembl_77_samples.rds')
BiocManager::install("DESeq2")
# get differential expression results for 77 samples from RNA-seq
DEG <- readRDS('../data/T_to_N_DE_results_hg19_ensembl_77_samples.rds')
library(deseq2)
library(DESeq2 )
library(DESeq2)
# get differential expression results for 77 samples from RNA-seq
DEG <- readRDS('../data/T_to_N_DE_results_hg19_ensembl_77_samples.rds')
# get differential expression results for 77 samples from RNA-seq
DEG <- readRDS('../data/T_to_N_DE_results_hg19_ensembl_77_samples.rds')
# get differential expression results for 77 samples from RNA-seq
DEG <- readRDS('../data/T_to_N_DE_results_hg19_ensembl_77_samples.rds')
library(DESeq2)
library(rtracklayer)
library(dplyr)
library(plyranges)
library(GenomicRanges)
library(differential.coverage)
library(stringr)
#load dSEDs
SEDs<-readRDS('../data/SE_by_ChipSeq.rds')
# calculate the midpoint of each SE
# this will be used to measure distance to nearest gene
SEDmids <- makeGRangesFromDataFrame(SEDs,
keep.extra.columns=TRUE,
ignore.strand=FALSE,
seqinfo=NULL,
seqnames.field=c("seqnames",
"seqname",
"chromosome",
"chrom",
"chr",
"chromosome_name",
"seqid"),
start.field="start",
end.field=c("end", "stop"),
strand.field="strand",
starts.in.df.are.0based=FALSE)# copy object as genomic ranges
# Note: in data, common_SE is how Sasha calls SED (super enhancer domain)
start(SEDmids) <- (start(SEDmids) + end(SEDmids)) / 2 # reassign start to midpoint
width(SEDmids) <- 1 # set width to 0, which should make end == start
# set all strands to *, as SEDs seem to be on both strands
strand(SEDmids) <- "*"
# Use Sasha's differential.coverage pacakge to get hg19 gene annotations
#gene.anno <- differential.coverage::get.Known.Gene.List(genome.annotation.id = 'gencode19')
gene.anno <- differential.coverage::gencode_hs19_genes
# Note: genes exist in chrX, chrY, chrM. We will remove chrY and chrM
# remove duplicate genes
gene_freq <- table(gene.anno$ensembl)
gene.dups <- names(which(gene_freq > 1))
# remove duplicates and chrY/chrM
gene.anno.u <- gene.anno %>%
filter((!ensembl %in% gene.dups) &
seqnames != "chrY" &
seqnames != "chrM")
# set the ranges of each gene to only be the start site (presumably transcription start site)
# note: account for strand - if strand == "-", set start to end
start(gene.anno.u) <- ifelse(as.character(strand(gene.anno.u)) == '-',
end(gene.anno.u),
start(gene.anno.u))
width(gene.anno.u) <- 1
# use distanceToNearest function to calculate the closest SED for each gene
gene_SED_hits <- distanceToNearest(gene.anno.u, SEDmids, ignore.strand=TRUE)
# error check that all entries had a nearest SED hit
stopifnot(length(queryHits(gene_SED_hits)) == length(gene.anno.u))
# subset out hits
genehits <- gene.anno.u[queryHits(gene_SED_hits)]
SEDhits <- SEDmids[subjectHits(gene_SED_hits)]
dists <- mcols(gene_SED_hits)$distance # conveniently access below
# adjust dist direction (sign) depending on whether gene TSS is upstream or
# downstream of SED location
gene_strand_minus <- as.character(strand(genehits))=='-'
SED_bigger <- start(genehits) < start(SEDhits)
# update dists - dists including direction from SED to gene TSS
# if minus and SED bigger, than its upstream, and +dist to gene
# if plus and SED smaller (FALSE == FALSE in comparison below), than its upstream, and +dist to gene
## otherwise, its the reverse
dists <- ifelse(gene_strand_minus == SED_bigger, dists, -dists)
# make df with results
SED.df <- data.frame(
distance = dists,
SE_ID = SEDhits$ID,
SE_logFC = SEDhits$logFC,
SE_logCPM = SEDhits$logCPM,
SE_F = SEDhits$F,
SE_PValue = SEDhits$PValue,
SE_FDR = SEDhits$FDR,
stringsAsFactors=FALSE)
# add genes as rownames
rownames(SED.df) <- genehits$ensembl
# get differential expression results for 77 samples from RNA-seq
DEG <- readRDS('../data/T_to_N_DE_results_hg19_ensembl_77_samples.rds')
# rename columns
colnames(DEG) <- str_c("GENE_",colnames(DEG))
colnames(DEG)[2] <- c("GENE_log2FC")
# find gene names with differential expression values that are also
# in the SED table I just made
genes.int <- intersect(rownames(DEG), rownames(SED.df))
# combine DEG with SED
DEG.SED.df <- as.data.frame(cbind(SED.df[genes.int,], DEG[genes.int,]))
saveRDS(DEG.SED.df,'../data/DEG.SED.df.rds')
